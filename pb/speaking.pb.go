// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        v3.21.12
// source: speaking.proto

package speaking

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SpeakingAssessmentRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Audio         []byte                 `protobuf:"bytes,1,opt,name=audio,proto3" json:"audio,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpeakingAssessmentRequest) Reset() {
	*x = SpeakingAssessmentRequest{}
	mi := &file_speaking_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpeakingAssessmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeakingAssessmentRequest) ProtoMessage() {}

func (x *SpeakingAssessmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_speaking_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeakingAssessmentRequest.ProtoReflect.Descriptor instead.
func (*SpeakingAssessmentRequest) Descriptor() ([]byte, []int) {
	return file_speaking_proto_rawDescGZIP(), []int{0}
}

func (x *SpeakingAssessmentRequest) GetAudio() []byte {
	if x != nil {
		return x.Audio
	}
	return nil
}

type SpeakingAssessment struct {
	state                   protoimpl.MessageState   `protogen:"open.v1"`
	SpeechTranscription     string                   `protobuf:"bytes,1,opt,name=speechTranscription,proto3" json:"speechTranscription,omitempty"`
	PronunciationAssessment *PronunciationAssessment `protobuf:"bytes,2,opt,name=pronunciationAssessment,proto3" json:"pronunciationAssessment,omitempty"`
	Score                   *Score                   `protobuf:"bytes,3,opt,name=score,proto3" json:"score,omitempty"`
	OverallAdvices          []string                 `protobuf:"bytes,4,rep,name=overallAdvices,proto3" json:"overallAdvices,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *SpeakingAssessment) Reset() {
	*x = SpeakingAssessment{}
	mi := &file_speaking_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpeakingAssessment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeakingAssessment) ProtoMessage() {}

func (x *SpeakingAssessment) ProtoReflect() protoreflect.Message {
	mi := &file_speaking_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeakingAssessment.ProtoReflect.Descriptor instead.
func (*SpeakingAssessment) Descriptor() ([]byte, []int) {
	return file_speaking_proto_rawDescGZIP(), []int{1}
}

func (x *SpeakingAssessment) GetSpeechTranscription() string {
	if x != nil {
		return x.SpeechTranscription
	}
	return ""
}

func (x *SpeakingAssessment) GetPronunciationAssessment() *PronunciationAssessment {
	if x != nil {
		return x.PronunciationAssessment
	}
	return nil
}

func (x *SpeakingAssessment) GetScore() *Score {
	if x != nil {
		return x.Score
	}
	return nil
}

func (x *SpeakingAssessment) GetOverallAdvices() []string {
	if x != nil {
		return x.OverallAdvices
	}
	return nil
}

type PronunciationAssessment struct {
	state                         protoimpl.MessageState   `protogen:"open.v1"`
	ActualPhoneticTranscription   string                   `protobuf:"bytes,1,opt,name=actualPhoneticTranscription,proto3" json:"actualPhoneticTranscription,omitempty"`
	ExpectedPhoneticTranscription string                   `protobuf:"bytes,2,opt,name=expectedPhoneticTranscription,proto3" json:"expectedPhoneticTranscription,omitempty"`
	PhonemeErrorDetails           []*PhonemeErrorDetail    `protobuf:"bytes,3,rep,name=phonemeErrorDetails,proto3" json:"phonemeErrorDetails,omitempty"`
	WordStressErrorDetails        []*WordStressErrorDetail `protobuf:"bytes,4,rep,name=wordStressErrorDetails,proto3" json:"wordStressErrorDetails,omitempty"`
	IntonationErrorDetails        *IntonationErrorDetail   `protobuf:"bytes,5,opt,name=intonationErrorDetails,proto3" json:"intonationErrorDetails,omitempty"`
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *PronunciationAssessment) Reset() {
	*x = PronunciationAssessment{}
	mi := &file_speaking_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PronunciationAssessment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PronunciationAssessment) ProtoMessage() {}

func (x *PronunciationAssessment) ProtoReflect() protoreflect.Message {
	mi := &file_speaking_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PronunciationAssessment.ProtoReflect.Descriptor instead.
func (*PronunciationAssessment) Descriptor() ([]byte, []int) {
	return file_speaking_proto_rawDescGZIP(), []int{2}
}

func (x *PronunciationAssessment) GetActualPhoneticTranscription() string {
	if x != nil {
		return x.ActualPhoneticTranscription
	}
	return ""
}

func (x *PronunciationAssessment) GetExpectedPhoneticTranscription() string {
	if x != nil {
		return x.ExpectedPhoneticTranscription
	}
	return ""
}

func (x *PronunciationAssessment) GetPhonemeErrorDetails() []*PhonemeErrorDetail {
	if x != nil {
		return x.PhonemeErrorDetails
	}
	return nil
}

func (x *PronunciationAssessment) GetWordStressErrorDetails() []*WordStressErrorDetail {
	if x != nil {
		return x.WordStressErrorDetails
	}
	return nil
}

func (x *PronunciationAssessment) GetIntonationErrorDetails() *IntonationErrorDetail {
	if x != nil {
		return x.IntonationErrorDetails
	}
	return nil
}

type PhonemeErrorDetail struct {
	state                       protoimpl.MessageState `protogen:"open.v1"`
	TranscribedWord             string                 `protobuf:"bytes,1,opt,name=transcribedWord,proto3" json:"transcribedWord,omitempty"`
	ExpectedWord                string                 `protobuf:"bytes,2,opt,name=expectedWord,proto3" json:"expectedWord,omitempty"`
	ExpectedPronunciation       string                 `protobuf:"bytes,3,opt,name=expectedPronunciation,proto3" json:"expectedPronunciation,omitempty"`
	ActualPronunciation         string                 `protobuf:"bytes,4,opt,name=actualPronunciation,proto3" json:"actualPronunciation,omitempty"`
	ErrorType                   string                 `protobuf:"bytes,5,opt,name=errorType,proto3" json:"errorType,omitempty"`
	ErrorStartIndex             int32                  `protobuf:"varint,6,opt,name=errorStartIndex,proto3" json:"errorStartIndex,omitempty"`
	ErrorEndIndex               int32                  `protobuf:"varint,7,opt,name=errorEndIndex,proto3" json:"errorEndIndex,omitempty"`
	Substituted                 string                 `protobuf:"bytes,8,opt,name=substituted,proto3" json:"substituted,omitempty"`
	ErrorDescription            string                 `protobuf:"bytes,9,opt,name=errorDescription,proto3" json:"errorDescription,omitempty"`
	ImprovementAdvice           string                 `protobuf:"bytes,10,opt,name=improvementAdvice,proto3" json:"improvementAdvice,omitempty"`
	ErrorStartIndexTranscriptio int32                  `protobuf:"varint,11,opt,name=errorStartIndexTranscriptio,proto3" json:"errorStartIndexTranscriptio,omitempty"`
	ErrorEndIndexTranscription  int32                  `protobuf:"varint,12,opt,name=errorEndIndexTranscription,proto3" json:"errorEndIndexTranscription,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *PhonemeErrorDetail) Reset() {
	*x = PhonemeErrorDetail{}
	mi := &file_speaking_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PhonemeErrorDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhonemeErrorDetail) ProtoMessage() {}

func (x *PhonemeErrorDetail) ProtoReflect() protoreflect.Message {
	mi := &file_speaking_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhonemeErrorDetail.ProtoReflect.Descriptor instead.
func (*PhonemeErrorDetail) Descriptor() ([]byte, []int) {
	return file_speaking_proto_rawDescGZIP(), []int{3}
}

func (x *PhonemeErrorDetail) GetTranscribedWord() string {
	if x != nil {
		return x.TranscribedWord
	}
	return ""
}

func (x *PhonemeErrorDetail) GetExpectedWord() string {
	if x != nil {
		return x.ExpectedWord
	}
	return ""
}

func (x *PhonemeErrorDetail) GetExpectedPronunciation() string {
	if x != nil {
		return x.ExpectedPronunciation
	}
	return ""
}

func (x *PhonemeErrorDetail) GetActualPronunciation() string {
	if x != nil {
		return x.ActualPronunciation
	}
	return ""
}

func (x *PhonemeErrorDetail) GetErrorType() string {
	if x != nil {
		return x.ErrorType
	}
	return ""
}

func (x *PhonemeErrorDetail) GetErrorStartIndex() int32 {
	if x != nil {
		return x.ErrorStartIndex
	}
	return 0
}

func (x *PhonemeErrorDetail) GetErrorEndIndex() int32 {
	if x != nil {
		return x.ErrorEndIndex
	}
	return 0
}

func (x *PhonemeErrorDetail) GetSubstituted() string {
	if x != nil {
		return x.Substituted
	}
	return ""
}

func (x *PhonemeErrorDetail) GetErrorDescription() string {
	if x != nil {
		return x.ErrorDescription
	}
	return ""
}

func (x *PhonemeErrorDetail) GetImprovementAdvice() string {
	if x != nil {
		return x.ImprovementAdvice
	}
	return ""
}

func (x *PhonemeErrorDetail) GetErrorStartIndexTranscriptio() int32 {
	if x != nil {
		return x.ErrorStartIndexTranscriptio
	}
	return 0
}

func (x *PhonemeErrorDetail) GetErrorEndIndexTranscription() int32 {
	if x != nil {
		return x.ErrorEndIndexTranscription
	}
	return 0
}

type WordStressErrorDetail struct {
	state                         protoimpl.MessageState `protogen:"open.v1"`
	Word                          string                 `protobuf:"bytes,1,opt,name=word,proto3" json:"word,omitempty"`
	SyllableBreakdown             []string               `protobuf:"bytes,2,rep,name=syllableBreakdown,proto3" json:"syllableBreakdown,omitempty"`
	ErrorType                     string                 `protobuf:"bytes,3,opt,name=errorType,proto3" json:"errorType,omitempty"`
	ActualStressedSyllableIndex   int32                  `protobuf:"varint,4,opt,name=actualStressedSyllableIndex,proto3" json:"actualStressedSyllableIndex,omitempty"`
	ExpectedStressedSyllableIndex int32                  `protobuf:"varint,5,opt,name=expectedStressedSyllableIndex,proto3" json:"expectedStressedSyllableIndex,omitempty"`
	ErrorDescription              string                 `protobuf:"bytes,6,opt,name=errorDescription,proto3" json:"errorDescription,omitempty"`
	ImprovementAdvice             string                 `protobuf:"bytes,7,opt,name=improvementAdvice,proto3" json:"improvementAdvice,omitempty"`
	ErrorStartIndex               int32                  `protobuf:"varint,8,opt,name=errorStartIndex,proto3" json:"errorStartIndex,omitempty"`
	ErrorEndIndex                 int32                  `protobuf:"varint,9,opt,name=errorEndIndex,proto3" json:"errorEndIndex,omitempty"`
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *WordStressErrorDetail) Reset() {
	*x = WordStressErrorDetail{}
	mi := &file_speaking_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WordStressErrorDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WordStressErrorDetail) ProtoMessage() {}

func (x *WordStressErrorDetail) ProtoReflect() protoreflect.Message {
	mi := &file_speaking_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WordStressErrorDetail.ProtoReflect.Descriptor instead.
func (*WordStressErrorDetail) Descriptor() ([]byte, []int) {
	return file_speaking_proto_rawDescGZIP(), []int{4}
}

func (x *WordStressErrorDetail) GetWord() string {
	if x != nil {
		return x.Word
	}
	return ""
}

func (x *WordStressErrorDetail) GetSyllableBreakdown() []string {
	if x != nil {
		return x.SyllableBreakdown
	}
	return nil
}

func (x *WordStressErrorDetail) GetErrorType() string {
	if x != nil {
		return x.ErrorType
	}
	return ""
}

func (x *WordStressErrorDetail) GetActualStressedSyllableIndex() int32 {
	if x != nil {
		return x.ActualStressedSyllableIndex
	}
	return 0
}

func (x *WordStressErrorDetail) GetExpectedStressedSyllableIndex() int32 {
	if x != nil {
		return x.ExpectedStressedSyllableIndex
	}
	return 0
}

func (x *WordStressErrorDetail) GetErrorDescription() string {
	if x != nil {
		return x.ErrorDescription
	}
	return ""
}

func (x *WordStressErrorDetail) GetImprovementAdvice() string {
	if x != nil {
		return x.ImprovementAdvice
	}
	return ""
}

func (x *WordStressErrorDetail) GetErrorStartIndex() int32 {
	if x != nil {
		return x.ErrorStartIndex
	}
	return 0
}

func (x *WordStressErrorDetail) GetErrorEndIndex() int32 {
	if x != nil {
		return x.ErrorEndIndex
	}
	return 0
}

type IntonationErrorDetail struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	ClauseText             string                 `protobuf:"bytes,1,opt,name=clauseText,proto3" json:"clauseText,omitempty"`
	ActualIntonationType   string                 `protobuf:"bytes,2,opt,name=actualIntonationType,proto3" json:"actualIntonationType,omitempty"`
	ExpectedIntonationType string                 `protobuf:"bytes,3,opt,name=expectedIntonationType,proto3" json:"expectedIntonationType,omitempty"`
	ErrorDescription       string                 `protobuf:"bytes,4,opt,name=errorDescription,proto3" json:"errorDescription,omitempty"`
	ImprovementAdvice      string                 `protobuf:"bytes,5,opt,name=improvementAdvice,proto3" json:"improvementAdvice,omitempty"`
	ErrorStartIndex        int32                  `protobuf:"varint,6,opt,name=errorStartIndex,proto3" json:"errorStartIndex,omitempty"`
	ErrorEndIndex          int32                  `protobuf:"varint,7,opt,name=errorEndIndex,proto3" json:"errorEndIndex,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *IntonationErrorDetail) Reset() {
	*x = IntonationErrorDetail{}
	mi := &file_speaking_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IntonationErrorDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntonationErrorDetail) ProtoMessage() {}

func (x *IntonationErrorDetail) ProtoReflect() protoreflect.Message {
	mi := &file_speaking_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntonationErrorDetail.ProtoReflect.Descriptor instead.
func (*IntonationErrorDetail) Descriptor() ([]byte, []int) {
	return file_speaking_proto_rawDescGZIP(), []int{5}
}

func (x *IntonationErrorDetail) GetClauseText() string {
	if x != nil {
		return x.ClauseText
	}
	return ""
}

func (x *IntonationErrorDetail) GetActualIntonationType() string {
	if x != nil {
		return x.ActualIntonationType
	}
	return ""
}

func (x *IntonationErrorDetail) GetExpectedIntonationType() string {
	if x != nil {
		return x.ExpectedIntonationType
	}
	return ""
}

func (x *IntonationErrorDetail) GetErrorDescription() string {
	if x != nil {
		return x.ErrorDescription
	}
	return ""
}

func (x *IntonationErrorDetail) GetImprovementAdvice() string {
	if x != nil {
		return x.ImprovementAdvice
	}
	return ""
}

func (x *IntonationErrorDetail) GetErrorStartIndex() int32 {
	if x != nil {
		return x.ErrorStartIndex
	}
	return 0
}

func (x *IntonationErrorDetail) GetErrorEndIndex() int32 {
	if x != nil {
		return x.ErrorEndIndex
	}
	return 0
}

type Score struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	Overall                  float32                `protobuf:"fixed32,1,opt,name=overall,proto3" json:"overall,omitempty"`
	FluencyCoherence         float32                `protobuf:"fixed32,2,opt,name=fluencyCoherence,proto3" json:"fluencyCoherence,omitempty"`
	LexicalResource          float32                `protobuf:"fixed32,3,opt,name=lexicalResource,proto3" json:"lexicalResource,omitempty"`
	GrammaticalRangeAccuracy float32                `protobuf:"fixed32,4,opt,name=grammaticalRangeAccuracy,proto3" json:"grammaticalRangeAccuracy,omitempty"`
	Pronunciation            float32                `protobuf:"fixed32,5,opt,name=pronunciation,proto3" json:"pronunciation,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *Score) Reset() {
	*x = Score{}
	mi := &file_speaking_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Score) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Score) ProtoMessage() {}

func (x *Score) ProtoReflect() protoreflect.Message {
	mi := &file_speaking_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Score.ProtoReflect.Descriptor instead.
func (*Score) Descriptor() ([]byte, []int) {
	return file_speaking_proto_rawDescGZIP(), []int{6}
}

func (x *Score) GetOverall() float32 {
	if x != nil {
		return x.Overall
	}
	return 0
}

func (x *Score) GetFluencyCoherence() float32 {
	if x != nil {
		return x.FluencyCoherence
	}
	return 0
}

func (x *Score) GetLexicalResource() float32 {
	if x != nil {
		return x.LexicalResource
	}
	return 0
}

func (x *Score) GetGrammaticalRangeAccuracy() float32 {
	if x != nil {
		return x.GrammaticalRangeAccuracy
	}
	return 0
}

func (x *Score) GetPronunciation() float32 {
	if x != nil {
		return x.Pronunciation
	}
	return 0
}

var File_speaking_proto protoreflect.FileDescriptor

var file_speaking_proto_rawDesc = string([]byte{
	0x0a, 0x0e, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x22, 0x31, 0x0a, 0x19, 0x53, 0x70,
	0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x22, 0xf2, 0x01,
	0x0a, 0x12, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x17, 0x70, 0x72, 0x6f, 0x6e, 0x75, 0x6e,
	0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x6e, 0x75, 0x6e, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x17, 0x70, 0x72, 0x6f, 0x6e,
	0x75, 0x6e, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x76,
	0x65, 0x72, 0x61, 0x6c, 0x6c, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0e, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x41, 0x64, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x22, 0xa3, 0x03, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x6e, 0x75, 0x6e, 0x63, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x40,
	0x0a, 0x1b, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x74, 0x69, 0x63,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1b, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x74, 0x69, 0x63, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x44, 0x0a, 0x1d, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x74, 0x69, 0x63, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x13, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x6d,
	0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x6d, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x13, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x6d, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x57, 0x0a, 0x16, 0x77, 0x6f, 0x72, 0x64, 0x53, 0x74,
	0x72, 0x65, 0x73, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x57, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x72, 0x65, 0x73, 0x73, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x16, 0x77, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x72,
	0x65, 0x73, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x57, 0x0a, 0x16, 0x69, 0x6e, 0x74, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x6f, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x16, 0x69, 0x6e, 0x74, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xb6, 0x04, 0x0a, 0x12, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x6d, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x28, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x57, 0x6f,
	0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x70,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x64, 0x12, 0x34, 0x0a,
	0x15, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6e, 0x75, 0x6e, 0x63,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x65, 0x78,
	0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6e, 0x75, 0x6e, 0x63, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x13, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x50, 0x72, 0x6f,
	0x6e, 0x75, 0x6e, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x6e, 0x75, 0x6e, 0x63, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x24, 0x0a,
	0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x45, 0x6e, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x45, 0x6e, 0x64, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74,
	0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69,
	0x74, 0x75, 0x74, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x69, 0x6d, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x6d,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x40, 0x0a, 0x1b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x1b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x12, 0x3e, 0x0a, 0x1a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x45, 0x6e, 0x64, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x45, 0x6e, 0x64, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xa9, 0x03, 0x0a, 0x15, 0x57, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x72, 0x65, 0x73, 0x73,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x2c, 0x0a, 0x11, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x72, 0x65, 0x61, 0x6b,
	0x64, 0x6f, 0x77, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x73, 0x79, 0x6c, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x1b, 0x61,
	0x63, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x53, 0x79, 0x6c,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x1b, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x53, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x44, 0x0a,
	0x1d, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x64, 0x53, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x1d, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x74,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x53, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2c, 0x0a, 0x11, 0x69, 0x6d, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x6d, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x45, 0x6e, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x45, 0x6e, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xcd, 0x02,
	0x0a, 0x15, 0x49, 0x6e, 0x74, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x75, 0x73,
	0x65, 0x54, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x61,
	0x75, 0x73, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x61, 0x63, 0x74, 0x75, 0x61,
	0x6c, 0x49, 0x6e, 0x74, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x49, 0x6e, 0x74,
	0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x65,
	0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x65, 0x78, 0x70,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2c, 0x0a, 0x11, 0x69, 0x6d, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x6d, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x45, 0x6e, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x45, 0x6e, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xd9, 0x01,
	0x0a, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x76, 0x65, 0x72, 0x61,
	0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c,
	0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x68, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x66, 0x6c, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x6c, 0x65, 0x78, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x6c, 0x65, 0x78, 0x69, 0x63, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x67, 0x72, 0x61, 0x6d, 0x6d,
	0x61, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x63, 0x63, 0x75, 0x72,
	0x61, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x18, 0x67, 0x72, 0x61, 0x6d, 0x6d,
	0x61, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x63, 0x63, 0x75, 0x72,
	0x61, 0x63, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x6e, 0x75, 0x6e, 0x63, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x6e,
	0x75, 0x6e, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x70, 0x0a, 0x19, 0x53, 0x70, 0x65,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x53, 0x0a, 0x0e, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73,
	0x53, 0x70, 0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x2e, 0x73, 0x70, 0x65, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x41, 0x73, 0x73, 0x65,
	0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e,
	0x73, 0x70, 0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0d, 0x5a, 0x0b, 0x70,
	0x62, 0x2f, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
})

var (
	file_speaking_proto_rawDescOnce sync.Once
	file_speaking_proto_rawDescData []byte
)

func file_speaking_proto_rawDescGZIP() []byte {
	file_speaking_proto_rawDescOnce.Do(func() {
		file_speaking_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_speaking_proto_rawDesc), len(file_speaking_proto_rawDesc)))
	})
	return file_speaking_proto_rawDescData
}

var file_speaking_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_speaking_proto_goTypes = []any{
	(*SpeakingAssessmentRequest)(nil), // 0: speaking.SpeakingAssessmentRequest
	(*SpeakingAssessment)(nil),        // 1: speaking.SpeakingAssessment
	(*PronunciationAssessment)(nil),   // 2: speaking.PronunciationAssessment
	(*PhonemeErrorDetail)(nil),        // 3: speaking.PhonemeErrorDetail
	(*WordStressErrorDetail)(nil),     // 4: speaking.WordStressErrorDetail
	(*IntonationErrorDetail)(nil),     // 5: speaking.IntonationErrorDetail
	(*Score)(nil),                     // 6: speaking.Score
}
var file_speaking_proto_depIdxs = []int32{
	2, // 0: speaking.SpeakingAssessment.pronunciationAssessment:type_name -> speaking.PronunciationAssessment
	6, // 1: speaking.SpeakingAssessment.score:type_name -> speaking.Score
	3, // 2: speaking.PronunciationAssessment.phonemeErrorDetails:type_name -> speaking.PhonemeErrorDetail
	4, // 3: speaking.PronunciationAssessment.wordStressErrorDetails:type_name -> speaking.WordStressErrorDetail
	5, // 4: speaking.PronunciationAssessment.intonationErrorDetails:type_name -> speaking.IntonationErrorDetail
	0, // 5: speaking.SpeakingAssessmentService.AssessSpeaking:input_type -> speaking.SpeakingAssessmentRequest
	1, // 6: speaking.SpeakingAssessmentService.AssessSpeaking:output_type -> speaking.SpeakingAssessment
	6, // [6:7] is the sub-list for method output_type
	5, // [5:6] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_speaking_proto_init() }
func file_speaking_proto_init() {
	if File_speaking_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_speaking_proto_rawDesc), len(file_speaking_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_speaking_proto_goTypes,
		DependencyIndexes: file_speaking_proto_depIdxs,
		MessageInfos:      file_speaking_proto_msgTypes,
	}.Build()
	File_speaking_proto = out.File
	file_speaking_proto_goTypes = nil
	file_speaking_proto_depIdxs = nil
}
